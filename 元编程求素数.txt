#include <iostream>
#include <deque> 

using namespace std;

struct tTrue
{
	static bool const i_Val = true;
};

template<bool a_Cdtn, typename a_tTrue, typename a_tFalse>
struct tYes;

template<typename a_tTrue, typename a_tFalse>
struct tYes < true, a_tTrue, a_tFalse >
{
	static bool const i_Val = a_tTrue::i_Val;
};

template<typename a_tTrue, typename a_tFalse>
struct tYes < false, a_tTrue, a_tFalse >
{
	static bool const i_Val = a_tFalse::i_Val;
};

template<int a_N, int a_M, bool a_C>
struct tAliquot
{
	static int const i_Mod = a_N % a_M;
	static int const i_L = a_M + 1;
	static bool const i_Val = tYes< (0 == i_Mod), tTrue, tAliquot<a_N, i_L, (i_L * i_L <= a_N)> >::i_Val;
};

template<int a_N, int a_M>
struct tAliquot < a_N, a_M, false >
{
	static bool const i_Val = false;
};

template<int a_N>
struct tPrime
{
	static bool const i_Val = !tAliquot<a_N, 2, true>::i_Val;
};

template<>
struct tPrime < 0 >
{
	static bool const i_Val = false;
};

template<>
struct tPrime < 1 >
{
	static bool const i_Val = false;
};

template<>
struct tPrime < 2 >
{
	static bool const i_Val = true;
};

deque<int> g_PA;

template<int a_N, int a_Max>
struct utFindPrime
	: public utFindPrime < a_N + 1, a_Max >
{
	static bool const i_Val = tPrime<a_N>::i_Val;

	utFindPrime()
	{
		if (i_Val)
			g_PA.push_front(a_N);
	}
};

template<int a_N>
struct utFindPrime < a_N, a_N >
{
	static bool const i_Val = tPrime<a_N>::i_Val;

	utFindPrime()
	{
		if (i_Val)
			g_PA.push_front(a_N);
	}
};

template<int a_Max>
struct utFindPrime<2, a_Max>
	: public utFindPrime < 2 + 1, a_Max >
{
	static bool const i_Val = true;

	utFindPrime()
	{
		if (i_Val)
			g_PA.push_front(2);
	}
};

template<int a_Max>
struct tFindPrime
	: public utFindPrime < 2, a_Max >
{ };

/////////////////////// 

int main()
{
	static int const i_Max = 100;
	tFindPrime<i_Max>(); cout << "Total = " << g_PA.size() << " :" << endl;

	for (size_t i = 0; i < g_PA.size(); ++i)
		cout << g_PA[i] << ", ";
	cout << endl;

	cout << endl << "===========================================================" << endl << endl;
	cin.get();
	return 0;
}